#!/usr/bin/env python3

# Copyright (C) 2019 Igalia S.L.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# pylint: disable=invalid-name

import multiprocessing
import re
import urllib.error
import urllib.parse
import urllib.request

from argument_parser import ArgumentParser
from phpreport import Credential
from phpreport import PHPReport
from report_creator import ReportCreator

class TwikiUploader():
    def __init__(self, url, section="Main", username=None, password=None):
        self.url = url
        self.section = section

        # Ensure that we can log in to the TWiki with HTTP authentication.
        Credential(self.url, username, password).activate()

    @classmethod
    def add_links_for_short_strings(cls, contents, reports):
        for report in reports:
            if not hasattr(report, "time_period"):
                continue

            short_string = report.time_period.short_string()
            contents = re.sub(r"%s(\W)" % short_string,
                              r"[[%s][%s]]\g<1>" % (report.wiki_string, short_string),
                              contents)
        return contents

    def upload(self, reports, all_reports):
        requests = [self.prepare_report(report, all_reports) for report in reports]
        pool = multiprocessing.Pool(processes=10)

        def send_url_request(request):
            try:
                urllib.request.urlopen(request)
            except urllib.error.URLError as url_error:
                print(url_error)
                print("Could not complete upload to TWiki at %s" % request.get_full_url())

        return pool.map(send_url_request, requests)

    def prepare_report(self, report, all_reports):
        page_name = report.wiki_string

        full_save_url = "%s/twiki/bin/save/%s/%s" % (self.url, self.section, page_name)
        full_view_url = "%s/twiki/bin/view/%s/%s" % (self.url, self.section, page_name)
        print("Uploading report to %s" % full_view_url)

        request = urllib.request.Request(full_save_url)

        contents = self.add_links_for_short_strings(report.generate_report(), all_reports)
        request_data = {'text': contents.encode('latin1')}
        if report.parent:
            request_data['topicparent'] = report.parent.wiki_string

        request.data = urllib.parse.urlencode(request_data).encode('latin1')
        return request


def main():
    parser = ArgumentParser()
    parser.add_argument(
        'twiki', metavar="TWIKI_URL", type=str,
        help="A base URL of a twiki to upload reports to.")
    args = parser.parse()
    args.formatter = "twiki"

    PHPReport.login(username=args.login)

    creator = ReportCreator(args)
    creator.create_reports()

    uploader = TwikiUploader(url=args.twiki,
                             username=PHPReport.credential.username,
                             password=PHPReport.credential.password)

    # We output the parent first because the children depend on the existence
    # of the parent.
    if creator.parent_report:
        print("parent")
        uploader.upload([creator.parent_report], creator.reports)
    uploader.upload(creator.reports, creator.reports)

if __name__ == '__main__':
    main()
