#!/usr/bin/env python
#
# Copyright (C) 2012 Igalia S.L.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

from phpreport import Customer
from phpreport import Project
from phpreport import PHPReport
from phpreport import User
from phpreport import TaskFilter

import argparse
import datetime
import getpass
import re
import textwrap
import sys
import time

class PeriodOfWork(object):
    def __init__(self, start_date, num_days, filter=filter):
        self.start_date = start_date
        self.num_days = num_days
        self.filter = filter

        self.users = set()
        self.tasks = PHPReport.get_tasks_in_range(self.get_date_for_day_offset(0),
                                                  self.get_date_for_day_offset(num_days - 1),
                                                  filter=filter)
        for task in self.tasks:
            self.users.add(task.user)

    def filter_tasks(self, date=None, day_offset=None, user=None):
        if date == None and day_offset != None:
            date = self.get_date_for_day_offset(day_offset)

        def filter_task(task):
            if user != None and task.user != user:
                return False
            if date != None and task.date != date:
                return False
            return True
        return filter(filter_task, self.tasks)

    def get_date_for_day_offset(self, day_offset):
        return self.start_date + datetime.timedelta(day_offset)

    def get_string_for_day_offset(self, day_offset, format="%d %b"):
        return self.get_date_for_day_offset(day_offset).strftime(format)

    def time_worked(self, date=None, day_offset=None, user=None):
        return sum([task.length() for task in self.filter_tasks(date, day_offset, user)], datetime.timedelta())

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-p', '--project', type=str)
    parser.add_argument('-c', '--customer', type=str)
    parser.add_argument('-u', '--user', type=str)
    parser.add_argument('-y', '--year', type=int,
                        default = datetime.datetime.today().isocalendar()[0])
    parser.add_argument('-w', '--week', type=int,
                        default = datetime.datetime.today().isocalendar()[1])
    args = parser.parse_args()


    if not args.project and not args.customer and not args.user:
        print "Must give either a customer (-c) search string or a product search string (-p)"
        sys.exit(1)

    username = raw_input("Username: ")
    password = getpass.getpass("Password: ")
    PHPReport.login(username, password)

    customer = None
    project = None
    user = None
    def filter_instances(instances, search_string):
        terms = search_string.lower().split(',')
        def matches_all(instance):
            for term in terms:
                if not instance.match(term):
                    return False
            return True
        return filter(matches_all, instances)

    if args.project != None:
        projects = filter_instances(Project.instances.values(), args.project)
        if not len(projects):
            print "Could not find any projects matching '%s'" % args.project
            sys.exit(1)
        project = projects[0]

    if args.customer != None:
        customers = filter_instances(Customer.instances.values(), args.customer)
        if not len(customers):
            print "Could not find any customers matching '%s'" % args.customer
            sys.exit(1)
        customer = customers[0]

    if args.user != None:
        users = [user for user in User.instances.values() if user.login == args.user]
        if not len(users):
            print "Could not find any customers matching '%s'" % args.customer
            sys.exit(1)
        user = users[0]

    # FIXME: Factor this into a class.
    start_date = datetime.datetime.strptime("%i %i 1" % (args.year, args.week), "%Y %W %w").date()
    work = PeriodOfWork(start_date, 7, TaskFilter(project=project, customer=customer, user=user))
    print "\nWeek %i of %i for" % (args.week, args.year),
    if project:
        print project.description
    elif customer:
        print customer.name
    else:
        print user.login

    def format_delta(delta):
        return "%02i:%02i" % (delta.days * 24 + delta.seconds // 3600, (delta.seconds // 60) % 60)

    print "%10.10s   %-6.6s %-6.6s %-6.6s %-6.6s %-6.6s %-6.6s %-6.6s %-6.6s" % \
          tuple([""] + [work.get_string_for_day_offset(x) for x in range(0, 7)] + ["Total"])
    for user in work.users:
        print "%10.10s   %-6.6s %-6.6s %-6.6s %-6.6s %-6.6s %-6.6s %-6.6s %-6.6s" % \
          tuple([user.login] + \
                [format_delta(work.time_worked(day_offset=x, user=user)) for x in range(0, 7)] + \
                [format_delta(work.time_worked(user=user))])
    print "%10.10s   %-6.6s %-6.6s %-6.6s %-6.6s %-6.6s %-6.6s %-6.6s" % \
          tuple(["everyone"] + [format_delta(work.time_worked(day_offset=x)) for x in range(0, 7)])
    print "\n    Total hours: %s\n" % format_delta(work.time_worked())

    for user in work.users:
        print "Stories for %s" % user.login
        for day_offset in range(0, 7):
            tasks_for_day = work.filter_tasks(day_offset=day_offset, user=user)
            all_stories = " ".join([task.text + task.story for task in tasks_for_day])

            # Strip out duplicated whitespace
            all_stories = re.compile(r'\s+').sub(' ', all_stories).strip()

            indent = 11 * ' ' # Enough to account for the day name offset.
            width = 80 - len(indent)
            all_stories = textwrap.fill(all_stories,
                                        break_long_words=False, # Don't break URLs.
                                        width=width,
                                        initial_indent=indent,
                                        subsequent_indent=indent).strip()
            print "%9.9s: %s" % \
                 (work.get_string_for_day_offset(day_offset, format="%A"),
                   all_stories)
        print

