#!/usr/bin/env python
#
# Copyright (C) 2012 Igalia S.L.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

from phpreport import Customer
from phpreport import Project
from phpreport import PHPReport
from phpreport import User
from phpreport import TaskFilter

import argparse
import base64
import datetime
import re
import textwrap
import sys
import time
import urllib
import urllib2

class PeriodOfWork(object):
    def __init__(self, start_date, num_days, filter=filter):
        self.start_date = start_date
        self.num_days = num_days
        self.filter = filter

        self.users = set()
        self.tasks = PHPReport.get_tasks_in_range(self.get_date_for_day_offset(0),
                                                  self.get_date_for_day_offset(num_days - 1),
                                                  filter=filter)
        for task in self.tasks:
            self.users.add(task.user)

    def filter_tasks(self, date=None, day_offset=None, user=None):
        if date == None and day_offset != None:
            date = self.get_date_for_day_offset(day_offset)

        def filter_task(task):
            if user != None and task.user != user:
                return False
            if date != None and task.date != date:
                return False
            return True
        return filter(filter_task, self.tasks)

    def get_all_dates(self):
        return [self.start_date + datetime.timedelta(offset) for offset in xrange(0, self.num_days)]

    def get_date_for_day_offset(self, day_offset):
        return self.start_date + datetime.timedelta(day_offset)

    def time_worked(self, date=None, day_offset=None, user=None):
        return sum([task.length() for task in self.filter_tasks(date, day_offset, user)], datetime.timedelta())

def format_delta(delta):
    return "%02i:%02i" % (delta.days * 24 + delta.seconds // 3600, (delta.seconds // 60) % 60)

class WeeklyReports(object):
    def __init__(self, weeks, filter=filter):
        self.weeks = weeks
        self.filter = filter
        self.reports = [WeeklyReport(week, filter) for week in weeks]

    def generate_report(self):
        self.report_pieces = []
        output = ""
        output += "\n\nWeek %i of %i to week %i of %i for %s\n" % \
            (self.weeks[0][1], self.weeks[0][0],
             self.weeks[-1][1], self.weeks[-1][0],
             self.filter)

        amount_worked_per_week = []
        for report in self.reports:
            amount = report.work.time_worked()
            amount_worked_per_week.append(amount)
            output += "%-20.20s  %-10.10s\n" % \
                      ("Week %i of %i:" % (report.week[1], report.week[0]), format_delta(amount))

        output += "%-20.20s  %-10.10s\n" % ("Total:", format_delta(sum(amount_worked_per_week, datetime.timedelta())))

        return output

class WeeklyReport(object):
    def __init__(self, week, filter=filter):
        self.filter = filter
        self.week = week

        week_as_string = "%i %i 1" % (week[0], week[1])
        start_date = datetime.datetime.strptime(week_as_string, "%Y %W %w").date()

        print "Fetching report for week %i of %i" % (week[1], week[0])
        self.work = PeriodOfWork(start_date, 7, filter=filter)

    @staticmethod
    def format_date(date):
        return date.strftime("%d %b")

    def generate_table_row(self, columns, header=False):
        format_string = "%10.10s   " + (len(columns) - 1) * '%-6.6s '
        self.report_pieces.append(format_string % tuple(columns))
        self.report_pieces.append("\n")

    def generate_table(self, table):
        if not len(table):
            return

        self.generate_table_row(table[0], header=True)
        for row in table[1:]:
            self.generate_table_row(row)

    def generate_report_header(self, header):
        self.report_pieces.append("\n%s\n" % header)

    def generate_section_header(self, header):
        self.report_pieces.append("\n%s\n" % header)

    def time_worked(self, user=None, total=False):
        if total:
            return [format_delta(self.work.time_worked(user=user))]
        all_dates = self.work.get_all_dates()
        return [format_delta(self.work.time_worked(date=x, user=user)) for x in all_dates]

    def generate_hours(self):
        table = []
        table.append([""] + map(WeeklyReport.format_date, self.work.get_all_dates()) + ["Total"])
        for user in self.work.users:
            table.append([user.login] + \
                         self.time_worked(user=user) + \
                         self.time_worked(user=user, total=True))
        table.append(["everyone"] + \
                     self.time_worked() + \
                     self.time_worked(total=True))

        self.generate_table(table)

    def get_stories_for_day_and_user(self, user, date):
        tasks_for_day = self.work.filter_tasks(date=date, user=user)
        all_stories = " ".join([task.text + task.story for task in tasks_for_day])

        # Strip out duplicated whitespace
        return re.compile(r'\s+').sub(' ', all_stories).strip()

    def generate_stories_for_user(self, user):
        self.generate_section_header("Stories for %s" % user.login)

        all_dates = self.work.get_all_dates()
        for date in all_dates:
            all_stories = self.get_stories_for_day_and_user(user, date)

            indent = 11 * ' ' # Enough to account for the day name offset.
            width = 80 - len(indent)
            all_stories = textwrap.fill(all_stories,
                                        break_long_words=False, # Don't break URLs.
                                        width=width,
                                        initial_indent=indent,
                                        subsequent_indent=indent).strip()
            self.report_pieces.append("%9.9s: %s\n" % (date.strftime("%A"), all_stories))

    def generate_report(self):
        self.report_pieces = []
        self.generate_report_header("Week %i of %i for %s" % (self.week[1], self.week[0], self.filter))
        self.generate_hours()

        for user in self.work.users:
            self.generate_stories_for_user(user)

        return "".join(self.report_pieces)

class TwikiWeelyReport(WeeklyReport):
    def generate_table_row(self, columns, header=False):
        if header:
            format_string = "| *%s* " + (len(columns) - 2) * "| *%s* " + "| *%s* |"
        else:
            format_string = "| *%s* " + (len(columns) - 2) * "| %s " + "| %s |"
        self.report_pieces.append(format_string % tuple(columns))
        self.report_pieces.append("\n")

    def generate_report_header(self, header):
        self.report_pieces.append("\n---++%s\n" % header)

    def generate_section_header(self, header):
        self.report_pieces.append("\n---++++%s\n" % header)

    def generate_stories_for_user(self, user):
        self.generate_section_header("Stories for %s" % user.login)

        all_dates = self.work.get_all_dates()
        for date in all_dates:
            all_stories = self.get_stories_for_day_and_user(user, date)
            self.report_pieces.append("   * *%s* - %s\n" % (date.strftime("%A"), all_stories))

class TwikiUploader(object):
    def __init__(self, url, section="Main", username=None, password=None):
        self.url = url
        self.section = section
        self.username=username
        self.password=password

    def upload(self, page_name, contents):
        full_save_url = "%s/twiki/bin/save/%s/%s" % (self.url, self.section, page_name)
        full_view_url = "%s/twiki/bin/view/%s/%s" % (self.url, self.section, page_name)
        print "Uploading report to %s" % full_view_url

        request = urllib2.Request(full_save_url)
        request.add_data(urllib.urlencode({'text': contents}))

        if self.username and self.password:
            request.add_header('Authorization',
                               'Basic ' + \
                               base64.urlsafe_b64encode("%s:%s" % (self.username,
                                                                   self.password)))
        try:
            urllib2.urlopen(request)
        except Exception as e:
            print e
            print "Could not complete upload to twiki at %s" % full_save_url

def parse_week_ranges(week_ranges, year):
    result = []
    if not "-" in week_ranges and not "," in week_ranges:
        return [(year, int(week_ranges.strip()))]

    for week_range in week_ranges.split(","):
        start_and_end = week_ranges.split("-")
        if len(start_and_end) == 1:
            result.append((year, int(start_and_end.strip())))
        else:
            for week in range(int(start_and_end[0].strip()), int(start_and_end[1].strip()) + 1):
                result.append((year, week))
    return result

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-l', '--login', type=str)
    parser.add_argument('-p', '--project', type=str)
    parser.add_argument('-c', '--customer', type=str)
    parser.add_argument('-u', '--user', type=str)
    parser.add_argument('-y', '--year', type=int,
                        default = datetime.datetime.today().isocalendar()[0])
    parser.add_argument('-w', '--week', type=str,
                        default = str(datetime.datetime.today().isocalendar()[1]))
    parser.add_argument('-t', '--twiki', action="store_true")
    parser.add_argument('--upload', type=str)
    args = parser.parse_args()

    if not args.project and not args.customer and not args.user:
        print "Must give either a customer (-c) search string or a product search string (-p)"
        sys.exit(1)

    PHPReport.login(username=args.login)

    customer = None
    project = None
    user = None
    def filter_instances(instances, search_string):
        terms = search_string.lower().split(',')
        def matches_all(instance):
            for term in terms:
                if not instance.match(term):
                    return False
            return True
        return filter(matches_all, instances)

    if args.project != None:
        projects = filter_instances(Project.instances.values(), args.project)
        if not len(projects):
            print "Could not find any projects matching '%s'" % args.project
            sys.exit(1)
        projects.sort()
        project = projects[-1]

    if args.customer != None:
        customers = filter_instances(Customer.instances.values(), args.customer)
        if not len(customers):
            print "Could not find any customers matching '%s'" % args.customer
            sys.exit(1)
        customer = customers[0]

    if args.user != None:
        users = [user for user in User.instances.values() if user.login == args.user]
        if not len(users):
            print "Could not find any customers matching '%s'" % args.customer
            sys.exit(1)
        user = users[0]

    task_filter = TaskFilter(project=project, customer=customer, user=user)
    weeks = parse_week_ranges(args.week, args.year)
    if len(weeks) > 1:
        report = WeeklyReports(weeks, task_filter)
        args.upload = False # No Twiki support for week ranges yet.
    else:
        report_class = WeeklyReport
        if args.twiki or args.upload:
            report_class = TwikiWeelyReport
        report = report_class(weeks[0], task_filter)

    if args.upload:
        uploader = TwikiUploader(url=args.upload, username=username, password=password)
        uploader.upload("Week%i-%i" % (args.week, args.year), report.generate_report())
    else:
        print report.generate_report()
